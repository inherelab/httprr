/*
 * httprr.trys.cc
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 inherelab/httprr</code>
 *
 * API version: 0.0.1
 * Contact: in.798@qq.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"//",
		Index,
	},

	Route{
		"AnythingAnythingDelete",
		strings.ToUpper("Delete"),
		"//anything/{anything}",
		AnythingAnythingDelete,
	},

	Route{
		"AnythingAnythingGet",
		strings.ToUpper("Get"),
		"//anything/{anything}",
		AnythingAnythingGet,
	},

	Route{
		"AnythingAnythingPatch",
		strings.ToUpper("Patch"),
		"//anything/{anything}",
		AnythingAnythingPatch,
	},

	Route{
		"AnythingAnythingPost",
		strings.ToUpper("Post"),
		"//anything/{anything}",
		AnythingAnythingPost,
	},

	Route{
		"AnythingAnythingPut",
		strings.ToUpper("Put"),
		"//anything/{anything}",
		AnythingAnythingPut,
	},

	Route{
		"AnythingDelete",
		strings.ToUpper("Delete"),
		"//anything",
		AnythingDelete,
	},

	Route{
		"AnythingGet",
		strings.ToUpper("Get"),
		"//anything",
		AnythingGet,
	},

	Route{
		"AnythingPatch",
		strings.ToUpper("Patch"),
		"//anything",
		AnythingPatch,
	},

	Route{
		"AnythingPost",
		strings.ToUpper("Post"),
		"//anything",
		AnythingPost,
	},

	Route{
		"AnythingPut",
		strings.ToUpper("Put"),
		"//anything",
		AnythingPut,
	},

	Route{
		"BasicAuthUserPasswdGet",
		strings.ToUpper("Get"),
		"//basic-auth/{user}/{passwd}",
		BasicAuthUserPasswdGet,
	},

	Route{
		"BearerGet",
		strings.ToUpper("Get"),
		"//bearer",
		BearerGet,
	},

	Route{
		"DigestAuthQopUserPasswdAlgorithmGet",
		strings.ToUpper("Get"),
		"//digest-auth/{qop}/{user}/{passwd}/{algorithm}",
		DigestAuthQopUserPasswdAlgorithmGet,
	},

	Route{
		"DigestAuthQopUserPasswdAlgorithmStaleAfterGet",
		strings.ToUpper("Get"),
		"//digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}",
		DigestAuthQopUserPasswdAlgorithmStaleAfterGet,
	},

	Route{
		"DigestAuthQopUserPasswdGet",
		strings.ToUpper("Get"),
		"//digest-auth/{qop}/{user}/{passwd}",
		DigestAuthQopUserPasswdGet,
	},

	Route{
		"HiddenBasicAuthUserPasswdGet",
		strings.ToUpper("Get"),
		"//hidden-basic-auth/{user}/{passwd}",
		HiddenBasicAuthUserPasswdGet,
	},

	Route{
		"CookiesDeleteGet",
		strings.ToUpper("Get"),
		"//cookies/delete",
		CookiesDeleteGet,
	},

	Route{
		"CookiesGet",
		strings.ToUpper("Get"),
		"//cookies",
		CookiesGet,
	},

	Route{
		"CookiesSetGet",
		strings.ToUpper("Get"),
		"//cookies/set",
		CookiesSetGet,
	},

	Route{
		"CookiesSetNameValueGet",
		strings.ToUpper("Get"),
		"//cookies/set/{name}/{value}",
		CookiesSetNameValueGet,
	},

	Route{
		"Base64ValueGet",
		strings.ToUpper("Get"),
		"//base64/{value}",
		Base64ValueGet,
	},

	Route{
		"BytesNGet",
		strings.ToUpper("Get"),
		"//bytes/{n}",
		BytesNGet,
	},

	Route{
		"DelayDelayDelete",
		strings.ToUpper("Delete"),
		"//delay/{delay}",
		DelayDelayDelete,
	},

	Route{
		"DelayDelayGet",
		strings.ToUpper("Get"),
		"//delay/{delay}",
		DelayDelayGet,
	},

	Route{
		"DelayDelayPatch",
		strings.ToUpper("Patch"),
		"//delay/{delay}",
		DelayDelayPatch,
	},

	Route{
		"DelayDelayPost",
		strings.ToUpper("Post"),
		"//delay/{delay}",
		DelayDelayPost,
	},

	Route{
		"DelayDelayPut",
		strings.ToUpper("Put"),
		"//delay/{delay}",
		DelayDelayPut,
	},

	Route{
		"DripGet",
		strings.ToUpper("Get"),
		"//drip",
		DripGet,
	},

	Route{
		"LinksNOffsetGet",
		strings.ToUpper("Get"),
		"//links/{n}/{offset}",
		LinksNOffsetGet,
	},

	Route{
		"RangeNumbytesGet",
		strings.ToUpper("Get"),
		"//range/{numbytes}",
		RangeNumbytesGet,
	},

	Route{
		"StreamBytesNGet",
		strings.ToUpper("Get"),
		"//stream-bytes/{n}",
		StreamBytesNGet,
	},

	Route{
		"StreamNGet",
		strings.ToUpper("Get"),
		"//stream/{n}",
		StreamNGet,
	},

	Route{
		"UuidGet",
		strings.ToUpper("Get"),
		"//uuid",
		UuidGet,
	},

	Route{
		"DeleteDelete",
		strings.ToUpper("Delete"),
		"//delete",
		DeleteDelete,
	},

	Route{
		"GetGet",
		strings.ToUpper("Get"),
		"//get",
		GetGet,
	},

	Route{
		"PatchPatch",
		strings.ToUpper("Patch"),
		"//patch",
		PatchPatch,
	},

	Route{
		"PostPost",
		strings.ToUpper("Post"),
		"//post",
		PostPost,
	},

	Route{
		"PutPut",
		strings.ToUpper("Put"),
		"//put",
		PutPut,
	},

	Route{
		"ImageGet",
		strings.ToUpper("Get"),
		"//image",
		ImageGet,
	},

	Route{
		"ImageJpegGet",
		strings.ToUpper("Get"),
		"//image/jpeg",
		ImageJpegGet,
	},

	Route{
		"ImagePngGet",
		strings.ToUpper("Get"),
		"//image/png",
		ImagePngGet,
	},

	Route{
		"ImageSvgGet",
		strings.ToUpper("Get"),
		"//image/svg",
		ImageSvgGet,
	},

	Route{
		"ImageWebpGet",
		strings.ToUpper("Get"),
		"//image/webp",
		ImageWebpGet,
	},

	Route{
		"AbsoluteRedirectNGet",
		strings.ToUpper("Get"),
		"//absolute-redirect/{n}",
		AbsoluteRedirectNGet,
	},

	Route{
		"RedirectNGet",
		strings.ToUpper("Get"),
		"//redirect/{n}",
		RedirectNGet,
	},

	Route{
		"RedirectToDelete",
		strings.ToUpper("Delete"),
		"//redirect-to",
		RedirectToDelete,
	},

	Route{
		"RedirectToGet",
		strings.ToUpper("Get"),
		"//redirect-to",
		RedirectToGet,
	},

	Route{
		"RedirectToPatch",
		strings.ToUpper("Patch"),
		"//redirect-to",
		RedirectToPatch,
	},

	Route{
		"RedirectToPost",
		strings.ToUpper("Post"),
		"//redirect-to",
		RedirectToPost,
	},

	Route{
		"RedirectToPut",
		strings.ToUpper("Put"),
		"//redirect-to",
		RedirectToPut,
	},

	Route{
		"RelativeRedirectNGet",
		strings.ToUpper("Get"),
		"//relative-redirect/{n}",
		RelativeRedirectNGet,
	},

	Route{
		"HeadersGet",
		strings.ToUpper("Get"),
		"//headers",
		HeadersGet,
	},

	Route{
		"IpGet",
		strings.ToUpper("Get"),
		"//ip",
		IpGet,
	},

	Route{
		"UserAgentGet",
		strings.ToUpper("Get"),
		"//user-agent",
		UserAgentGet,
	},

	Route{
		"BrotliGet",
		strings.ToUpper("Get"),
		"//brotli",
		BrotliGet,
	},

	Route{
		"DeflateGet",
		strings.ToUpper("Get"),
		"//deflate",
		DeflateGet,
	},

	Route{
		"DenyGet",
		strings.ToUpper("Get"),
		"//deny",
		DenyGet,
	},

	Route{
		"EncodingUtf8Get",
		strings.ToUpper("Get"),
		"//encoding/utf8",
		EncodingUtf8Get,
	},

	Route{
		"GzipGet",
		strings.ToUpper("Get"),
		"//gzip",
		GzipGet,
	},

	Route{
		"HtmlGet",
		strings.ToUpper("Get"),
		"//html",
		HtmlGet,
	},

	Route{
		"JsonGet",
		strings.ToUpper("Get"),
		"//json",
		JsonGet,
	},

	Route{
		"RobotsTxtGet",
		strings.ToUpper("Get"),
		"//robots.txt",
		RobotsTxtGet,
	},

	Route{
		"XmlGet",
		strings.ToUpper("Get"),
		"//xml",
		XmlGet,
	},

	Route{
		"CacheGet",
		strings.ToUpper("Get"),
		"//cache",
		CacheGet,
	},

	Route{
		"CacheValueGet",
		strings.ToUpper("Get"),
		"//cache/{value}",
		CacheValueGet,
	},

	Route{
		"EtagEtagGet",
		strings.ToUpper("Get"),
		"//etag/{etag}",
		EtagEtagGet,
	},

	Route{
		"ResponseHeadersGet",
		strings.ToUpper("Get"),
		"//response-headers",
		ResponseHeadersGet,
	},

	Route{
		"ResponseHeadersPost",
		strings.ToUpper("Post"),
		"//response-headers",
		ResponseHeadersPost,
	},

	Route{
		"StatusCodesDelete",
		strings.ToUpper("Delete"),
		"//status/{codes}",
		StatusCodesDelete,
	},

	Route{
		"StatusCodesGet",
		strings.ToUpper("Get"),
		"//status/{codes}",
		StatusCodesGet,
	},

	Route{
		"StatusCodesPatch",
		strings.ToUpper("Patch"),
		"//status/{codes}",
		StatusCodesPatch,
	},

	Route{
		"StatusCodesPost",
		strings.ToUpper("Post"),
		"//status/{codes}",
		StatusCodesPost,
	},

	Route{
		"StatusCodesPut",
		strings.ToUpper("Put"),
		"//status/{codes}",
		StatusCodesPut,
	},
}
